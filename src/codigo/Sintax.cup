package codigo;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal tApertura, Declaracion, Entero, Decimal, Flotante, vString, Boleano,
        tCierre, Corchete_a, Corchete_c, Op_Relacional, IfElse, FinIf, While, FinWhile,
        hastaW, DosPuntos, Identificador, If, digito, Op_Relacional, Asignacion, Op_Aritmeticos,
        
non terminal INICIO, COMIENZO, VARIABLE, CERRAR, IF, SENTENCIA_RELACION, COD_IF,
            ELSE, CIERREIF, IMPRIMIR, CICLO_WHILE, SEN_REL, CIERRE_WHILE, COD_WHILE
            

/*_____DECLARAR VARIABLES_____*/
INICIO ::= 
        COMIENZO VARIABLE CERRAR
;
COMIENZO ::= 
        tApertura Declaracion DosPuntos
;
VARIABLE ::= 
        Entero |
        Decimal | 
        Flotante |
        vString |
        Boleano |
;
CERRAR ::= 
        Identificador tCierre |
        tCierre
;

/*______DECLARAR CICLO IF, IF ELSE, IF ELSE IF_____*/
IF ::= 
    tApertura If DosPuntos SENTENCIA_RELACION tCierre BLOQUE_COD
;
SENTENCIA_RELACION ::= 
        Corchete_a Identificador Op_Relacional Identificador Corchete_c |
        Corchete_a Identificador Op_Relacional digito Corchete_c
;
COD_IF ::= 
            IMPRIMIR CIERREIF |
            IMPRIMIR ELSE
;
ELSE ::= 
        tApertura IfElse tCierre BLOQUE_COD |
        tApertura IfElse tCierre IF
;
CIERREIF ::= 
        tApertura FinIf tCierre
;

/*_____DECLARAR CICLO WHILE_____*/
CICLO_WHILE ::= 
    tApertura While DosPuntos SEN_REL tCierre COD_W IMPRIMIR CIERRE_WHILE
;
SEN_REL ::= 
        hastaW Corchete_a Identificador Op_Relacional digito Corchete_c |
        hastaW Corchete_a Identificador Op_Relacional Identificador Corchete_c
;
COD_WHILE ::= 
        Identificador Asignacion digito Suma digito |
        Identificador Asignacion digito Resta digito |
        Identificador Asignacion digito Multiplicacion digito |
        Identificador Asignacion digito Division digito |
        Identificador Asignacion digito Suma Identificador |
        Identificador Asignacion digito Resta Identificador |
        Identificador Asignacion digito Multiplicacion Identificador |
        Identificador Asignacion digito Division Identificador
;
CIERRE_WHILE ::= 
            tApertura FinWhile tCierre
;
/*DECLARAR FOR*/
CICLO_FOR ::= tApertura QC_Variar dosPuntos IN_FIN tCierre CODIGO IMPRIMIR CIERRE_FOR

IN_FIN ::= Identificador tDesde dosPuntos digito tFin dosPuntos digito tPaso dosPuntos digito

CODIGO ::= Identificador tAsignacion digito OPERACION_ARIT digito 
        | Identificador tAsignacion digito OPERACION_ARIT Identificador 

CIERRE_FOR ::= tApertura QC_Variar_Fin tCierre

/*DECLARAR DO WHILE*/
CICLO_DO_WHILE ::= INICIO BLOQ CONDICION2 FINDW

INICIO ::= tApertura QC_Chispudo tCierre

CODIGO ::= Identificador tAsignacion digito OPERACION_ARIT digito 
        | Identificador tAsignacion digito OPERACION_ARIT Identificador 

CONDICION2 ::= tApertura QC_Pior dosPuntos SENTENCIA_RELACION

SENTENCIA_RELACION ::= corchete_ap Identificador Op_Relacional Identificador corchete_ci
                | corchete_ap Identificador Op_Relacional digito corchete_ci

FINDW ::= tApertura QC_Chispudo_Fin tCierre

/*DECLARAR UNA CLASE*/
CLASE ::= INICIO BLOQUE_CODIGO CIERRE
INICIO ::= tApertura tClase Identificador tCierre
BLOQUE_CODIGO ::= ATRIBUTO CONSTRUCTOR
ATRIBUTO ::= tApertura DECLARACION_VAR Variable Identificador tCierre
CONSTRUCTOR ::= 
CIERRE ::= tApertura tClase tCierre