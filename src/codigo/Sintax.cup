package codigo;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Suma, Resta, Multiplicacion, Division, Asignacion, Porcentaje, Op_Relacional,
    Corchete_a, Corchete_c, Parentesis_a, Parentesis_c, Comillas, Coma, PuntoComa, 
    Concatenar, Declaracion, Entero, Decimal, Flotante, vString, Boleano, funcion,
    Modificadores_Acceso, Salida, If, FinIf, IfElse, While, hastaW, FinWhile, For,
    desdeF, finF, pasoF, forFin, DoWhile, DoWhileFin, TipoEntero, Verdadero, TipoPisto,
    TipoCentavo, TipoLen, LlamaFuncion, tApertura, tCierre, DosPuntos, Identificador,
    digito, CumpleBloque, Clase, Constructor, ClaseFin, Atributo, ConstructorFin,
    Llave_a, Llave_c; 
non terminal VARIABLES, COMIENZO, VARIABLE, CERRAR, IF, SENTENCIA_RELACION, COD_IF,
            ELSE, CIERREIF, IMPRIMIR, CICLO_WHILE, SEN_REL, CIERRE_WHILE, COD_WHILE,
            SEN_FOR, COD_FOR, CIERRE_FOR, DO_WHILE, INI_DOWHILE,CONDICION2,
            FINDW, SENT_DW, INI_CLASS, CLASE, COD_CLASE, CIERRE_CLASE, ATRIBUTO, 
            CONSTRUCTOR, PARAMETROS, COD_CONST, CIERRE_ATRIB, METODO, INI_METODO,
            COD_METODO, REINT, BLOQUE_METODO, BLOQ2_METOD, ARGUMENTO, ASIG,
            DECL2, CADENA, MAIN, IMPRIMIR, INI_IMP, VALOR, FIN_IMP, VALOR2;

/*imprimir*/

IMPRIMIR ::= 
        INI_IMP VALOR FIN_IMP |
        INI_IMP VALOR2 FIN_IMP
;
INI_IMP ::= 
        tApertura Salida DosPuntos
;
VALOR ::=
        Comillas CADENA Comillas |
        Comillas CADENA Comillas Concatenar Identificador |
        digito Concatenar Comillas CADENA Comillas Concatenar Identificador Comillas CADENA Comillas Concatenar Identificador |
;
VALOR2 ::=
        Comillas CADENA Comillas Concatenar Identificador Concatenar VALOR2
;
FIN_IMP ::=
        tCierre
;
/*€€€€€€€  variables €€€€€€€*/
VARIABLES ::= 
        COMIENZO VARIABLE CERRAR |
        COMIENZO DECL2 tCierre
;
COMIENZO ::= 
        tApertura Declaracion DosPuntos
;
VARIABLE ::= 
        Entero |
        Decimal | 
        Flotante |
        Boleano
;
DECL2 ::=
        vString Identificador Asignacion Comillas CADENA Comillas tCierre
;
CADENA ::= 
        | Identificador CADENA |
        Identificador
;
CERRAR ::= 
        Identificador tCierre |
        tCierre
;

/*€€€€€€ if, if else, if else if €€€€€€*/

IF ::= 
    tApertura If DosPuntos SENTENCIA_RELACION tCierre BLOQUE_COD
;
SENTENCIA_RELACION ::= 
        Corchete_a Identificador Op_Relacional Identificador Corchete_c |
        Corchete_a Identificador Op_Relacional digito Corchete_c
;
COD_IF ::= 
            IMPRIMIR CIERREIF |
            IMPRIMIR ELSE
;
ELSE ::= 
        tApertura IfElse tCierre COD_IF |
        tApertura IfElse tCierre IF
;
CIERREIF ::= 
        tApertura FinIf tCierre
;

/*€€€€€€€ while €€€€€€€*/

CICLO_WHILE ::= 
    tApertura While DosPuntos SEN_REL tCierre COD_WHILE IMPRIMIR CIERRE_WHILE
;
SEN_REL ::= 
        hastaW Corchete_a Identificador Op_Relacional digito Corchete_c |
        hastaW Corchete_a Identificador Op_Relacional Identificador Corchete_c
;
COD_WHILE ::= 
        Identificador Asignacion Identificador Suma digito |
        Identificador Asignacion Identificador Resta digito |
        Identificador Asignacion Identificador Multiplicacion digito |
        Identificador Asignacion Identificador Division digito
;
CIERRE_WHILE ::= 
            tApertura FinWhile tCierre
;

/*€€€€€€ for €€€€€€€*/

CICLO_FOR ::= 
           tApertura For DosPuntos SEN_FOR tCierre COD_FOR IMPRIMIR CIERRE_FOR
;
SEN_FOR ::= 
        Identificador desdeF DosPuntos digito finF DosPuntos digito pasoF DosPuntos digito
;
COD_FOR ::= 
        Identificador Asignacion digito Suma digito |
        Identificador Asignacion Identificador Suma digito |
        Identificador Asignacion digito Resta digito |
        Identificador Asignacion Identificador Resta digito |
        Identificador Asignacion digito Multiplicacion digito |
        Identificador Asignacion Identificador Multiplicacion digito |
        Identificador Asignacion digito Division digito |
        Identificador Asignacion Identificador Division digito
;
CIERRE_FOR ::= 
            tApertura forFin tCierre
;

/*€€€€€€€ do while €€€€€€€*/

DO_WHILE ::= 
            INI_DOWHILE COD_WHILE CONDICION2 FINDW
;
INI_DOWHILE ::= 
            tApertura DoWhile tCierre
;
CONDICION2 ::= 
            tApertura CumpleBloque DosPuntos SENT_DW
;
SENT_DW ::= 
            Corchete_a Identificador Op_Relacional Identificador Corchete_c | 
            Corchete_a Identificador Op_Relacional digito Corchete_c
;
FINDW ::= 
        tApertura DoWhileFin tCierre
;

/*€€€€€€ clase €€€€€€€*/

CLASE ::= 
        INI_CLASS COD_CLASE CIERRE_CLASE
;
INI_CLASS ::= 
            tApertura Clase Identificador tCierre
;
COD_CLASE ::= | 
        METODO |
        ATRIBUTO CONSTRUCTOR
;
ATRIBUTO ::= 
        tApertura Declaracion DosPuntos Modificadores_Acceso Entero Identificador tCierre |
        tApertura Declaracion DosPuntos Modificadores_Acceso Decimal Identificador tCierre |
        tApertura Declaracion DosPuntos Modificadores_Acceso Flotante Identificador tCierre |
        tApertura Declaracion DosPuntos Modificadores_Acceso vString Identificador tCierre |
        tApertura Declaracion DosPuntos Modificadores_Acceso Entero Identificador tCierre ATRIBUTO|
        tApertura Declaracion DosPuntos Modificadores_Acceso Decimal Identificador tCierre ATRIBUTO|
        tApertura Declaracion DosPuntos Modificadores_Acceso Flotante Identificador tCierre ATRIBUTO|
        tApertura Declaracion DosPuntos Modificadores_Acceso vString Identificador tCierre ATRIBUTO
;
CONSTRUCTOR ::= 
            tApertura Constructor Modificadores_Acceso Identificador DosPuntos PARAMETROS tCierre COD_CONST CIERRE_ATRIB
;
PARAMETROS ::= 
            Corchete_a tApertura Declaracion DosPuntos Entero Identificador tCierre Corchete_c |
            Corchete_a tApertura Declaracion DosPuntos Flotante Identificador tCierre Corchete_c |
            Corchete_a tApertura Declaracion DosPuntos Decimal Identificador tCierre Corchete_c |
            Corchete_a tApertura Declaracion DosPuntos Entero Identificador tCierre Corchete_c
;
COD_CONST ::=
        tApertura Atributo Identificador Asignacion Identificador tCierre
;
CIERRE_ATRIB ::=
            tApertura ConstructorFin tCierre
;
CIERRE_CLASE ::= 
            tApertura ClaseFin tCierre
;

/*€€€€€€ metodo €€€€€€*/

METODO ::= 
        INI_METODO REINT
;
INI_METODO ::=
            Modificadores_Acceso Modificadores_Acceso Identificador SENT_METODO
;
SENT_METODO ::=
            Parentesis_a ARGUMENTO Parentesis_c BLOQUE_METODO |
            Parentesis_a ARGUMENTO_V Parentesis_c BLOQUE_METODO
;
ARGUMENTO::= 
            Entero Identificador |
            PuntoComa Entero Identificador ARGUMENTO |
            Decimal Identificador |
            PuntoComa Decimal Identificador ARGUMENTO |
            Flotante Identificador |
            PuntoComa Flotante Identificador ARGUMENTO |
            vString Identificador
            PuntoComa vString Identificador ARGUMENTO
;
BLOQUE_METODO ::=
                Llave_a VARIABLES BLOQ2_METOD BLOQUE_METODO |
                Llave_a IMPRIMIR BLOQ2_METOD BLOQUE_METODO |
                Llave_a VARIABLES IMPRIMIR BLOQ2_METOD BLOQUE_METODO
;
BLOQ2_METOD ::= 
            Identificador Asignacion Identificador Suma Identificador PuntoComa |
            Identificador Asignacion Identificador Suma digito PuntoComa |
            Identificador Asignacion Identificador Resta Identificador PuntoComa |
            Identificador Asignacion Identificador Resta digito PuntoComa |
            Identificador Asignacion Identificador Multiplicacion Identificador PuntoComa |
            Identificador Asignacion Identificador Multiplicacion digito PuntoComa |
            Identificador Asignacion Identificador Division Identificador PuntoComa |
            Identificador Asignacion Identificador Division Identificador PuntoComa
;            
REINT ::=
        LlamaFuncion Identificador PuntoComa Llave_c
;        

/*MAIN*/

MAIN::= CLASE